// Generated by CoffeeScript 1.6.3
(function() {
  var async, buildCaKey, buildCaPem, buildCsrFile, buildExtFile, buildKeyFile, buildPemFile, ensureCAExists, fs, run, spawn, tmp;

  spawn = require('child_process').spawn;

  fs = require('fs');

  async = require('async');

  tmp = require('tmp');

  run = function(command, args, options, cb) {
    var child, _ref;
    if (cb == null) {
      _ref = [options, {}], cb = _ref[0], options = _ref[1];
    }
    child = spawn(command, args, {
      stdio: 'inherit'
    });
    return child.on('exit', function(code) {
      var err;
      err = code !== 0 && new Error("non-zero return code " + code) || null;
      return cb(err, code);
    });
  };

  buildCaKey = function(files, cb) {
    return run('openssl', ['genrsa', '-out', files.ca.key, 1024], cb);
  };

  buildCaPem = function(files, cb) {
    return run('openssl', ['req', '-subj', '/C=US/ST=California/L=San Francisco/CN=dnster CA', '-x509', '-new', '-nodes', '-key', files.ca.key, '-days', '9999', '-out', files.ca.pem], cb);
  };

  buildExtFile = function(files, hosts, cb) {
    var contents, host, i;
    contents = "[req]\nreq_extensions = v3_req\n\n[v3_req]\nkeyUsage = keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n\n[alt_names]\n" + (((function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = hosts.length; _i < _len; i = ++_i) {
        host = hosts[i];
        _results.push("DNS." + (i + 1) + " = " + host);
      }
      return _results;
    })()).join("\n"));
    console.log(contents);
    return fs.writeFile(files.site.ext, contents, cb);
  };

  buildKeyFile = function(files, cb) {
    return run('openssl', ['genrsa', '-out', files.site.key, 1024], cb);
  };

  buildCsrFile = function(files, cb) {
    return run('openssl', ['req', '-subj', '/C=US/ST=California/L=San Francisco/CN=local-tld', '-new', '-key', files.site.key, '-out', files.site.csr], cb);
  };

  buildPemFile = function(files, cb) {
    return run('openssl', ['x509', '-req', '-days', 9999, '-in', files.site.csr, '-CA', files.ca.pem, '-CAkey', files.ca.key, '-CAserial', files.ca.srl, '-CAcreateserial', '-out', files.site.pem, '-extensions', 'v3_req', '-extfile', files.site.ext], cb);
  };

  ensureCAExists = function(files, cb) {
    if (fs.existsSync(files.ca.key) && fs.existsSync(files.ca.pem)) {
      return cb();
    } else {
      return async.series([buildCaKey.bind(null, files), buildCaPem.bind(null, files)], cb);
    }
  };

  module.exports = {
    rebuild: function(files, routes, cb) {
      var host, hosts;
      hosts = (function() {
        var _results;
        _results = [];
        for (host in routes) {
          _results.push(host);
        }
        return _results;
      })();
      return async.series([ensureCAExists.bind(null, files), buildKeyFile.bind(null, files), buildCsrFile.bind(null, files), buildExtFile.bind(null, files, hosts), buildPemFile.bind(null, files)], cb);
    }
  };

}).call(this);
