// Generated by CoffeeScript 1.6.3
(function() {
  var addFilesToConfig, extend, fs, omit, path, tmp,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  tmp = require('tmp');

  extend = function() {
    var k, source, sources, target, v, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (k in source) {
        v = source[k];
        target[k] = v;
      }
    }
    return target;
  };

  omit = function() {
    var k, keys, obj, out, v;
    obj = arguments[0], keys = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    out = {};
    for (k in obj) {
      v = obj[k];
      if (__indexOf.call(keys, k) < 0) {
        out[k] = v;
      }
    }
    return out;
  };

  addFilesToConfig = function(config, cb) {
    var configDir;
    configDir = path.dirname(config.path);
    return tmp.dir(function(err, tmpDir) {
      if (err != null) {
        return cb(err);
      }
      config.files = {
        ca: {
          key: path.join(configDir, 'ca.key'),
          pem: path.join(configDir, 'ca.pem'),
          srl: path.join(tmpDir, 'ca.srl')
        },
        site: {
          key: path.join(configDir, 'site.key'),
          pem: path.join(configDir, 'site.pem'),
          csr: path.join(tmpDir, 'site.csr'),
          ext: path.join(tmpDir, 'site.ext')
        }
      };
      return cb();
    });
  };

  module.exports = {
    read: function(dir, cb) {
      var configFilePath;
      configFilePath = path.join(dir, 'config.json');
      return fs.readFile(configFilePath, function(err, contents) {
        var config;
        if ((err != null ? err.code : void 0) === 'ENOENT') {
          config = {
            ports: {},
            ssl: false,
            path: configFilePath
          };
          return addFilesToConfig(config, function(err) {
            if (err != null) {
              return cb(err);
            }
            return cb(null, config);
          });
        } else if (err != null) {
          return cb(err);
        } else {
          try {
            config = extend(JSON.parse(contents), {
              path: configFilePath
            });
            return addFilesToConfig(config, function(err) {
              if (err != null) {
                return cb(err);
              }
              return cb(null, config);
            });
          } catch (_error) {
            err = _error;
            return cb(err);
          }
        }
      });
    },
    write: function(dir, obj, cb) {
      return fs.writeFile(path.join(dir, 'config.json'), JSON.stringify(omit(obj, 'path', 'files')), cb);
    },
    addSite: function(path, name, port, cb) {
      var _this = this;
      return this.read(path, function(err, obj) {
        if (err != null) {
          return cb(err);
        }
        obj.ports[port] = {
          name: name
        };
        return _this.write(path, obj, cb);
      });
    },
    addSiteAlias: function(path, name, alias, cb) {
      var _this = this;
      return this.read(path, function(err, obj) {
        var port, portConfig, _ref;
        if (err != null) {
          return cb(err);
        }
        _ref = obj.ports;
        for (port in _ref) {
          portConfig = _ref[port];
          if (!(portConfig.name === name)) {
            continue;
          }
          (portConfig.aliases != null ? portConfig.aliases : portConfig.aliases = {})[alias] = true;
          return _this.write(path, obj, cb);
        }
        return cb(new Error("could not find site '" + name + "'"));
      });
    },
    setSSL: function(path, enabled, cb) {
      var _this = this;
      return this.read(path, function(err, obj) {
        if (err != null) {
          return cb(err);
        }
        obj.ssl = enabled;
        return _this.write(path, obj, cb);
      });
    }
  };

}).call(this);
