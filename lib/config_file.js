// Generated by CoffeeScript 1.6.3
(function() {
  var fs;

  fs = require('fs');

  module.exports = {
    read: function(path, cb) {
      return fs.readFile(path, function(err, contents) {
        if ((err != null ? err.code : void 0) === 'ENOENT') {
          return cb(null, {
            ports: {},
            ssl: false
          });
        } else if (err != null) {
          return cb(err);
        } else {
          try {
            return cb(null, JSON.parse(contents));
          } catch (_error) {
            err = _error;
            return cb(err);
          }
        }
      });
    },
    write: function(path, obj, cb) {
      return fs.writeFile(path, JSON.stringify(obj), cb);
    },
    addSite: function(path, name, port, cb) {
      var _this = this;
      return this.read(path, function(err, obj) {
        if (err != null) {
          return cb(err);
        }
        obj.ports[port] = {
          name: name
        };
        return _this.write(path, obj, cb);
      });
    },
    addSiteAlias: function(path, name, alias, cb) {
      var _this = this;
      return this.read(path, function(err, obj) {
        var port, portConfig, _ref;
        if (err != null) {
          return cb(err);
        }
        _ref = obj.ports;
        for (port in _ref) {
          portConfig = _ref[port];
          if (!(portConfig.name === name)) {
            continue;
          }
          (portConfig.aliases != null ? portConfig.aliases : portConfig.aliases = {})[alias] = true;
          return _this.write(path, obj, cb);
        }
        return cb(new Error("could not find site '" + name + "'"));
      });
    },
    setSSL: function(path, enabled, cb) {
      var _this = this;
      return this.read(path, function(err, obj) {
        if (err != null) {
          return cb(err);
        }
        obj.ssl = enabled;
        return _this.write(path, obj, cb);
      });
    }
  };

}).call(this);
